---
const sections = {
  "#manifesto": "Manifesto",
  "#guidelines": "Guidelines",
  "#implementations": "Implementations",
  "#supporters": "Supporters",
  "#contribute": "Contribute",
};
---

<header>
  <a href="/">
    <svg
      width="24"
      height="24"
      viewBox="0 0 20 20"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <rect x="6" y="6" width="8" height="8" stroke="#A3A093" stroke-width="1.2"
      ></rect>
      <rect
        x="11.4"
        y="3.4"
        width="5.2"
        height="5.2"
        fill="#A3A093"
        stroke="#F5F4F1"
        stroke-width="1.2"></rect>
      <rect
        x="3.4"
        y="11.4"
        width="5.2"
        height="5.2"
        fill="#A3A093"
        stroke="#F5F4F1"
        stroke-width="1.2"></rect>
    </svg>
  </a>
  <ul class="desktop">
    {
      Object.entries(sections).map(([anchor, title]) => (
        <li>
          <a href={anchor}>{title}</a>
        </li>
      ))
    }
  </ul>
  <div class="mobile">
    <button id="section"
      >Initiative<svg
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M10.0026 12.4997L5.83594 8.33301H14.1693L10.0026 12.4997Z"
          fill="#7A786E"></path>
      </svg>
    </button>
    <div id="menu">
      <div class="menu-card">
        {
          Object.entries(sections).map(([anchor, title]) => (
            <a href={anchor}>{title}</a>
          ))
        }
        <a
          class="separator"
          href="https://github.com/hookdeck/event-destinations"
          target="_blank">GitHub ↗</a
        >
      </div>
    </div>
  </div>
  <ul class="right desktop">
    <li>
      <a href="https://github.com/hookdeck/event-destinations" target="_blank"
        >GitHub ↗</a
      >
    </li>
  </ul>
</header>

<script>
  // Add menu toggle functionality
  const sectionButton = document.getElementById("section");
  const menu = document.getElementById("menu");

  sectionButton?.addEventListener("click", () => {
    menu?.classList.toggle("open");
    sectionButton.classList.toggle("active");
  });

  // Close menu when clicking outside
  document.addEventListener("click", (e) => {
    if (
      !sectionButton?.contains(e.target as Node) &&
      !menu?.contains(e.target as Node)
    ) {
      menu?.classList.remove("open");
      sectionButton?.classList.remove("active");
    }
  });

  // Add intersection observer for navigation
  const navLinks = document.querySelectorAll("header ul a");
  const sections = document.querySelectorAll("section[id]");

  const createObserverCallback =
    (isLastSection: boolean) => (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // Remove active class from all links
          navLinks.forEach((link) => link.classList.remove("active"));

          // For the last section, only activate if scrolled near bottom
          if (isLastSection) {
            const scrollPosition = window.scrollY + window.innerHeight;
            const nearBottom =
              document.documentElement.scrollHeight - scrollPosition < 100;
            if (!nearBottom) return;
          }

          // Add active class to corresponding nav link
          const activeId = entry.target.id;
          const activeLink = document.querySelector(
            `header ul a[href="#${activeId}"]`
          );
          if (activeLink) {
            activeLink.classList.add("active");

            // Update the section button text to match active link
            if (sectionButton) {
              // Extract just the text content, removing the SVG
              const buttonText = sectionButton.childNodes[0];
              buttonText.textContent = activeLink.textContent;
            }
          }
        }
      });
    };

  const observer = new IntersectionObserver(createObserverCallback(false), {
    rootMargin: "-10% 0px -60% 0px",
    threshold: 0,
  });

  const observerLastEntry = new IntersectionObserver(
    createObserverCallback(true),
    {
      rootMargin: "0px 0px 0px 0px",
      threshold: 0,
    }
  );

  sections.forEach((section, i) =>
    i === sections.length - 1
      ? observerLastEntry.observe(section)
      : observer.observe(section)
  );
</script>

<style>
  header {
    position: sticky;
    top: var(--spacing-2);
    left: 0;
    right: 0;
    height: 58px;
    padding: 0 var(--spacing-10);
    box-sizing: border-box;
    display: flex;
    flex-direction: row;
    gap: var(--spacing-8);
    align-items: center;
    background-color: var(--background);
    border-bottom: 1px solid var(--outline-neutral);
    z-index: 1000;
    justify-content: space-between;

    &:after {
      content: "";
      position: fixed;
      left: var(--spacing-2);
      right: var(--spacing-2);
      bottom: var(--spacing-2);
      top: var(--spacing-2);
      border: 1px solid var(--outline-neutral);
      pointer-events: none;
      box-shadow: 0 0 0 var(--spacing-2) var(--background);
      z-index: -1;

      @media (max-width: 744px) {
        display: none;
      }
    }

    .mobile {
      display: none;
      position: relative;

      #section {
        all: unset;
        cursor: pointer;
        text-transform: uppercase;
        padding: var(--spacing-2) var(--spacing-4);
        border-radius: 4px;
        font-size: var(--font-size-s);
        line-height: var(--font-line-height-s);
        letter-spacing: var(--font-letter-spacing-s);

        &:hover {
          background-color: var(--background-neutral);
        }

        &.active {
          background-color: var(--background-neutral);
        }
      }

      #menu {
        display: none;
        position: fixed;

        &.open {
          display: block;
        }

        .menu-card {
          display: flex;
          flex-direction: column;
          z-index: 1000;
          position: fixed;
          top: var(--spacing-2);
          left: var(--spacing-2);
          right: var(--spacing-2);
          background-color: var(--background);
          box-sizing: border-box;
          border: 1px solid var(--foreground-neutral);
          a {
            color: var(--foreground-neutral-3);
            text-decoration: none;
            padding: var(--spacing-4);
            text-align: center;
            color: var(--foreground-neutral);
            text-transform: uppercase;
            font-size: var(--font-size-s);
            line-height: var(--font-line-height-s);
            letter-spacing: var(--font-letter-spacing-s);

            &:not(:first-child) {
              border-top: 1px dashed var(--outline-neutral);
            }

            &.separator {
              border-top: 1px solid var(--foreground-neutral);
            }

            &:hover {
              background-color: var(--background-neutral);
            }
          }
        }

        &::before {
          content: "";
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background: rgba(0, 0, 0, 0.25);
          z-index: 999;
          pointer-events: none;
        }
      }
    }

    select {
      border: none;
      background-color: transparent;
    }

    @media (max-width: 904px) {
      .mobile {
        display: block;

        #section {
          display: flex;
          align-items: center;
          gap: var(--spacing-1);
        }
      }

      .desktop {
        display: none;
      }
    }

    @media (max-width: 744px) {
      padding: 0 var(--spacing-4);
      gap: var(--spacing-4);
      display: grid;
      top: 0;
      grid-template-columns: 32px 1fr 32px;
      .mobile {
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .desktop {
        display: none;
      }
    }

    > a {
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .right {
      margin-left: auto;
    }
  }

  ul {
    margin: 0;
    list-style: none;
    padding: 0;
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: var(--spacing-8);

    li {
      a {
        display: flex;
        align-items: center;
        height: 58px;
        text-decoration: none;
        color: var(--foreground-neutral-3);
        position: relative;
        text-transform: uppercase;
        font-size: var(--font-size-s);
        line-height: var(--font-line-height-s);
        letter-spacing: var(--font-letter-spacing-s);

        &:hover {
          text-decoration: none;
          &:after {
            content: "";
            position: absolute;
            bottom: -1px;
            left: 0;
            right: 0;
            height: 2px;
            background-color: var(--foreground-neutral-3);
          }
        }
        &.active {
          color: var(--foreground-neutral);
          &:after {
            content: "";
            position: absolute;
            bottom: -1px;
            left: 0;
            right: 0;
            height: 2px;
            background-color: var(--foreground-neutral);
          }
        }
      }
    }
  }
</style>
